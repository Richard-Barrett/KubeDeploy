1: Take a backup of the etcd cluster and save it to /tmp/etcd-backup.db
A: Run the command ETCDCTL_API=3 etcdctl --endpoints https://[127.0.0.1]:2379 --cacert /etc/kubernetes/pki/etcd/ca.crt --cert /etc/kubernetes/pki/etcd/healthcheck-client.crt --key=/etc/kubernetes/pki/etcd/healthcheck-client.key snapshot save /tmp/etcd-backup.db

2: Create a Pod called redis-storage with image: redis:alpine with a Volume of type emptyDir that lasts for the life of the Pod. Specs on the right.
A:

3: Create a new pod called super-user-pod with image busybox:1.28. Allow the pod to be able to set system_time
A: Add a securityContext Capabilities at container level

4: A pod definition file is created at /root/use-pv.yaml. Make use of this manifest file and mount the persistent volume called pv-1. Ensure the pod is running and the PV is bound.
A: Add a persistentVolumeClaim definition to pod definition file

5: Create a new deployment called nginx-deploy, with image nginx:1.16 and 1 replica. Record the version. Next upgrade the deployment to version 1.17 using rolling update. Make sure that the version upgrade is recorded in the resource annotation.
A: Explore the --record option while creating the deployment. Use kubectl edit or kubectl set image to upgrade the version.

6: Create a new user called john. Grant him access to the cluster. John should have permission to create, list, get, update and delete pods in the development namespace . The private key exists in the location: /root/john.key and csr at /root/john.csr
A: Generate a certificateSigningRequest for John and get it approved. Create the correct RBAC configuration for the user.

7: Create an nginx pod called nginx-resolver using image nginx, expose it internally with a service called nginx-resolver-service. Test that you are able to look up the service and pod names from within the cluster. Use the image: busybox:1.28 for dns lookup. Record results in /root/nginx.svc and /root/nginx.pod
A: 

8: Create a static pod on node01 called nginx-critical with image nginx. Create this pod on node01 and make sure that it is recreated/restarted automatically in case of a failure.
A: Add --pod-manifest-path to kubelet service on worker or staticPodPath in the kubelet config.yaml
