# 1 Taints
List all the nodes in the cluster and check which do not contain any non-scheduling and not-reachable node. 
Write the output to /opt/nodes.txt

# 2 Static Pods
Create a static pod on the worker node. 
The name should be kplabs-static and it should be launched from the nginx image.

# 3 Toleration
Create a deployment named kplabs-tolerate. 
The deployment should be launched from nginx image and it should tolerate the taint of mykey:myvalue:Noschedule. 
Create 6 replicas of the deployment.

# Question 4: Taints
Add a taint to one of the worker node where key is mykey, value is mvalue and effect should be NoSchedule

# Question 5: Persistent Volumes
List all persistent volumes sorted by capacity, saving the full kubcet1 output in text file path (given in exam)

# Question 6: DaemonSet
Create single instance of pod on every node (i.e. daemonset). do not alter taints on node. 

# Question 7: Deployment
Create a deployment as follows 

    • Name ngnix-app 

    • Using container ngnix with version 1.11.10-alpine 

    • The deployment should contain 3 replicas 

    Next, deploy the application with new version 1.13.0-alpine, by performing a rolling update, 

    and record that update 

    Finally, rollback that update to the previous version 1.11.10-alpine 
    
# Question 8: Service
Create and configure the service front-end-service so its accessible through ClusterIP and routes to the existing pod named front-end.

# Question 9: Scaling
Scale the deployment web-server to 3 pods.

# Question 10: Taint
Check to see how many nodes are ready (not including nodes tainted Nonscheduled) and write the number to file name_of_file_given_in_question

# Question 11: Metrics Server
Find pods running high CPU workloads and write the name of the pod consuming most CPU to the file name_of_file_given_in_question 

# Question 12: Create a deployment as follows 

    • Name ngnix-random 

    • Exposed via a service ngnix-random 

    • Ensure that the service & pod are accessible via their respective DNS records 

    • The container(s) within any pod(s) running as a part of this deployment should use the ngnix image 

    Next,use the utility nslookup to look up the DNS records of the Service & pod and write the 

    output to optservice.dns and optservice.dns respectively. 
    
# Question 13:
A kubernetes worker node is in state NotReady Investigate why this is the case, and perform any appropriates steps to bring the node to a Ready state

# Question 14:
Configure the kubelet system- managed service (i.e. static pod), on mentioned worker node. details of pod name will be given in exam

# Question 15:
You need to setup k8s cluster of 1 master and 1 worker node using kubeadm tool, kubeadm.config file will be given using this file you need to initialized master node. 

# Question 16:
Given a partially- functioning Kuberenetes cluster, identify symptoms of failure on the cluster. 

# Question 17: ETCD Backup
Take backup of ETCD cluster save it to some file.

# Question 18:
Create persistentvolume using hostpath /mnt/data  specification given in question 

# Question 19:
Need to add init container in given pod specification file, this init container will create some file

# Question 20:
Set the node named worker-node as unavailable and reschedule all the pods running on it. 

# Question 21:
Create a pod as follows 

    • Name non-persistent-redis 

    • Container image redis 

    • Persistent volume with name app-cache 

    • Mouth path /data/redis 

    It should launch in the qa namespace and the volume must be persistent. 
    
# Question 22:
Create a Kubernetes secret as follows 

    • Name super-secret 

    • Credential mouse 

    Create a pod named pod-secrets-via-file, using the redis image, which mounts a secret 

    named super-secret at secrets. 

    Create a second pod named pod-secrets-via-env, using the redis image, which exports 

    credential as
    
# Question 23:
Create a single pod with 4 app container
NGINX+REDIS+MEMCACHED+CONSUL

# Question 24:
Create a deployment with given replicas 6 and store the it in a yaml file
